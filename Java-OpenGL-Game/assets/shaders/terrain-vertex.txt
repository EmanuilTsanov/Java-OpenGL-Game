#version 400 core

in vec3 vertex;
in vec2 texCoords;
in vec3 normal;

uniform mat4 modelMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];

const float density = 0.003;
const float gradient = 3;

out vec2 textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[4];
out float visibility;

void main()
{
	vec4 worldPosition = modelMatrix * vec4(vertex, 1.0);
	vec4 relativeToCamera = viewMatrix * worldPosition;
	gl_Position = projectionMatrix * relativeToCamera;
	textureCoords = texCoords;
	surfaceNormal = (modelMatrix * vec4(normal, 1.0)).xyz;
	for(int i = 0; i < 4; i++)
	{
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	
	float distance = length(relativeToCamera.xyz);
	visibility = exp(-pow((distance*density), gradient));
	visibility = clamp(visibility, 0.0, 1.0);
}