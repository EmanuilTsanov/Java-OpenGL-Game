#version 330 core

in vec3 unitNormal;
in vec3 unitToLightVec;
in vec3 unitToCameraVec;

in vec2 textureCoords;

uniform sampler2D sampler;

uniform struct Light
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
} light;
uniform struct Material
{
	vec3 diffuse;
	vec3 specular;
	float shininess;
} material;

out vec4 finalColor;

void main(void)
{
vec4 color = texture(sampler, textureCoords);
	float brightness = max(dot(unitNormal, unitToLightVec), 0.0f);
	vec3 diffuse = brightness * material.diffuse * light.diffuse;
	vec3 finalDiffuse = clamp(diffuse, 0.0f, 1.0f);
	
	vec3 finalAmbient = light.ambient;
	
	vec3 lightDirection = -unitToLightVec;
	vec3 reflectLightDir = reflect(lightDirection, unitNormal);
	vec3 specular = light.specular * pow(max(dot(reflectLightDir, unitToCameraVec), 0.0f), 0.3f * material.shininess);
	vec3 finalSpecular = clamp(specular, 0.0f, 1.0f);
	
	finalColor = color + vec4((finalDiffuse * finalAmbient * finalSpecular).xyz, 1.0f);
}