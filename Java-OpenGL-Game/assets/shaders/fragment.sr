#version 330 core

in vec3 normal;
in vec2 textureCoords;
in vec3 toLightVector;
in vec3 toCameraVector;

uniform sampler2D sampler;
uniform vec3 lightColor;

uniform float shineDamper;
uniform float reflectivity;

out vec4 pixelColor;

void main(void)
{
	vec3 unitNormal = normalize(normal);
	vec3 unitToLightVector = normalize(toLightVector);
	
	float dotProduct = dot(unitNormal, unitToLightVector);
	float brightness = max(dotProduct, 0.3);
	
	vec3 diffuse = lightColor * brightness;
	
	vec3 unitToCameraVector = normalize(toCameraVector);
	vec3 unitLightDirection = -unitToLightVector;
	
	vec3 reflectedLightDirection = reflect(unitLightDirection, unitNormal);
	
	float specularFactor = dot(reflectedLightDirection, unitToCameraVector);
	specularFactor = max(specularFactor, 0.0);
	float dampedSpecular = pow(specularFactor, shineDamper);
	vec3 specular = dampedSpecular * reflectivity * lightColor;
	
	vec4 textureColor = texture(sampler, textureCoords);
	if(textureColor.a < 0.5)
	{
		discard;
	}
	
	pixelColor = vec4(diffuse, 1.0) * textureColor + vec4(specular, 1.0);
}