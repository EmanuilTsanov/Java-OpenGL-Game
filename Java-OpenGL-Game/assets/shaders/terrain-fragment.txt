#version 400 core

in vec2 textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in float visibility;
in vec4 shadowCoords;

uniform sampler2D sampler;
uniform vec3 lightColor[4];
uniform vec3 skyColor;
uniform vec3 attenuation[4];
uniform sampler2D shadowMap;

out vec4 finalColor;

const int pcfCount = 2;
const float totalTexels = (pcfCount * 2.0 + 1.0) * (pcfCount * 2.0 + 1.0);

void main()
{
	float mapSize = 4096;
	float texelSize = 1.0 / mapSize;
	float total = 0.0;
	
	for(int x = -pcfCount; x<=pcfCount; x++) {
		for(int y = -pcfCount; y<=pcfCount; y++) {
			float objectNearestLight = texture(shadowMap, shadowCoords.xy + vec2(x, y) * texelSize).r;
			if(shadowCoords.z > objectNearestLight + 0.002) {
				total += 1.0;
			}
		}
	}
	
	total /= totalTexels;


	float lightFactor = 1.0 - (total * shadowCoords.w);

	vec3 unitNormal = normalize(surfaceNormal);
	
	vec3 totalDiffuse = vec3(0.0);
	
	for(int i = 0; i < 4; i++)
	{
		float distance = length(toLightVector[i]);
		float attenuationFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 unitToLightVector = normalize(toLightVector[i]);
		float dotProduct = dot(unitNormal, unitToLightVector);
		float brightness = max(dotProduct, 0.0);
		totalDiffuse += (brightness * lightColor[i]) / attenuationFactor;
	}
	totalDiffuse = max(totalDiffuse * lightFactor, 0.2);
	
	vec4 textureColor = texture(sampler, textureCoords*80);
	
	finalColor = vec4(totalDiffuse, 1.0) * textureColor;
	finalColor = mix(vec4(skyColor, 1.0), finalColor, visibility);
}