#version 330 core

in vec2 textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in float visibility;

uniform sampler2D sampler;
uniform vec3 lightColor[4];
uniform vec3 skyColor;

out vec4 finalColor;

void main()
{
	vec3 unitNormal = normalize(surfaceNormal);
	
	vec3 diffuse = vec3(0.0);
	
	for(int i = 0; i < 4; i++)
	{
		vec3 unitToLightVector = normalize(toLightVector[i]);
		
		float dotProduct = dot(unitNormal, unitToLightVector);
		float brightness = max(dotProduct, 0.0);
		
		diffuse = diffuse + lightColor[i] * brightness;
	}
	diffuse = max(diffuse, 0.2);
	
	vec4 textureColor = texture(sampler, textureCoords*80);
	
	finalColor = vec4(diffuse, 1.0) * textureColor;
	finalColor = mix(vec4(skyColor, 1.0), finalColor, visibility);
}