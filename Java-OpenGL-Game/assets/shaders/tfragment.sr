#version 330 core

in vec2 textureCoords;
in vec4 shadowCoords;

uniform sampler2D shadowMap;
uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform float mapSize;

out vec4 finalColor;

const int pcfCount = 2;
const float totalTexels = (pcfCount * 2.0f + 1.0f) * (pcfCount * 2.0f + 1.0f);

void main()
{
	vec4 blendMapColor = texture(blendMap, textureCoords);
	
	float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
	vec2 tiledCoords = textureCoords * 80f;
	vec4 backgroundTextureColor = texture(backgroundTexture, tiledCoords) * backTextureAmount;
	vec4 rTextureColor = texture(rTexture, tiledCoords) * blendMapColor.r;
	vec4 gTextureColor = texture(gTexture, tiledCoords) * blendMapColor.g;
	vec4 bTextureColor = texture(bTexture, tiledCoords) * blendMapColor.b;
	
	vec4 totalColor = backgroundTextureColor + rTextureColor + gTextureColor + bTextureColor;

	float texelSize = 1.0f / mapSize;
	float total = 0.0f;
	
	for(int x = -pcfCount; x <= pcfCount; x++)
	{
		for(int y = -pcfCount; y <= pcfCount; y++)
		{
			float objectNearestLight = texture(shadowMap, shadowCoords.xy + vec2(x, y) * texelSize).r;
			if(shadowCoords.z > objectNearestLight) {
				total += 1.0f;
			}
		}
	}
	
	total /= totalTexels;
	
	float lightFactor = 1.0f - (total * shadowCoords.w) * 0.5f;
	
	finalColor = totalColor * vec4(1.0f,1.0f,1.0f,1.0f) * lightFactor;
}